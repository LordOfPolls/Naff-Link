from attr import define, field


@define()
class Stats:
    total_players: int = field(default=0)
    """The total number of players"""
    playing_players: int = field(default=0)
    """The number of players currently playing"""

    uptime: int = field(default=0, converter=lambda x: x / 1000)
    """The amount of time this instance has been running in seconds"""
    sent_frames: int = field(default=0)
    """The number of frames sent by this instance"""
    deficit_frames: int = field(default=0)
    """The number of frames in deficit by this instance. Any deficit frames is an indication that the instance is overwhelmed"""
    null_frames: int = field(default=0)
    """The number of frames of null data sent by this instance"""

    free_memory: int = field(default=0)
    """The amount of allocated memory remaining in bytes"""
    used_memory: int = field(default=0)
    """The amount of used memory in bytes"""
    allocated_memory: int = field(default=0)
    """The amount of allocated memory in bytes"""
    reservable_memory: int = field(default=0)
    """The amount of reservable memory in bytes"""
    total_memory: int = field(default=0)
    """The total amount of system memory in bytes"""

    cpu_cores: int = field(default=0)
    """The number of CPU cores"""
    system_load: float = field(default=0)
    """The system load as a percentage"""
    lavalink_load: float = field(default=0)
    """The system load generated by lavalink as a percentage"""

    @property
    def deficit_frames_percent(self) -> float:
        if not self.sent_frames:
            return 0
        return self.deficit_frames / self.sent_frames * 100

    @classmethod
    def from_dict(cls, data: dict):
        memory = data["memory"]
        cpu = data["cpu"]

        inst = cls(
            total_players=data["players"],
            playing_players=data["playingPlayers"],
            uptime=data["uptime"],
            free_memory=memory["free"],
            used_memory=memory["used"],
            allocated_memory=memory["allocated"],
            reservable_memory=memory["reservable"],
            cpu_cores=cpu["cores"],
            system_load=cpu["systemLoad"],
            lavalink_load=cpu["lavalinkLoad"],
        )
        if frame_stats := data.get("frameStats"):
            inst.sent_frames = frame_stats["sent"]
            inst.deficit_frames = frame_stats["deficit"]
            inst.null_frames = frame_stats["nulled"]
        return inst
